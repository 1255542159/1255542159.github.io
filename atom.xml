<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>没有翅膀却想飞上天空</title>
  
  
  <link href="http://125542159.github.io/atom.xml" rel="self"/>
  
  <link href="http://125542159.github.io/"/>
  <updated>2020-03-27T15:56:11.355Z</updated>
  <id>http://125542159.github.io/</id>
  
  <author>
    <name>Joy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo个人博客添加宠物</title>
    <link href="http://125542159.github.io/2020/11/29/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%AE%A0%E7%89%A9/"/>
    <id>http://125542159.github.io/2020/11/29/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%AE%A0%E7%89%A9/</id>
    <published>2020-11-29T11:04:45.411Z</published>
    <updated>2020-03-27T15:56:11.355Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="效果类似于下图"><a href="#效果类似于下图" class="headerlink" title="效果类似于下图"></a>效果类似于下图</h1><p><img src="http://ww1.sinaimg.cn/large/a517fa25gy1g9alcbz61sj20j1091aa9.jpg" alt="J0M_4XLIPS_Q(0%PDXYEJIW.png">  </p><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>cmd切换到你的博客的路径里，然后输入如下代码：<br><code>npm install -save hexo-helper-live2d</code><br><img src="http://ww1.sinaimg.cn/large/a517fa25gy1g9alfmegs8j20le08jaao.jpg" alt="3123.png">  </p><h2 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h2><p>live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16  </p><p>比如我选择的的是live2d-widget-model-hijiki 模型包<br>在hexo博客根目录选择cmd命令窗口或者git bash 输入以下代码<br><code>npm install live2d-widget-model-hijiki</code><br>执行安装就完事了</p><p>##配置<br>打开个人Hexo博客文件根目录下的 _config.yml 文件，在最后添加一下代码<br>示例:<br>live2d:<br>  enable: true<br>  scriptFrom: local<br>  pluginRootPath: live2dw/<br>  pluginJsPath: lib/<br>  pluginModelPath: assets/<br>  tagMode: false<br>  debug: false<br>  model:<br>    use: live2d-widget-model-hijiki  //这里是模型包<br>  display:<br>    position: right<br>    width: 150<br>    height: 300<br>  mobile:<br>    show: true  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何使用Hexo搭建个人博客</title>
    <link href="http://125542159.github.io/2020/11/29/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://125542159.github.io/2020/11/29/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-11-29T11:04:45.395Z</published>
    <updated>2020-03-27T15:56:32.939Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="需要下载的软件"><a href="#需要下载的软件" class="headerlink" title="需要下载的软件"></a>需要下载的软件</h2><p>1，下载Node.js 地址:<a href="https://nodejs.org/">https://nodejs.org/</a><br><img src="https://i.bmp.ovh/imgs/2019/11/cfb8c8a2d13278f3.png"><br>2，下载Git 地址:<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br><img src="https://ftp.bmp.ovh/imgs/2019/11/6abf7699dc2629ce.png">  </p><h2 id="软件安装完后的操作步骤"><a href="#软件安装完后的操作步骤" class="headerlink" title="软件安装完后的操作步骤"></a>软件安装完后的操作步骤</h2><p>1，下载完后我们去本地磁盘新建一个Hexo文件夹，在这个新建的文件夹内单击鼠标右键然后选择Git Bash Here<br><img src="https://i.bmp.ovh/imgs/2019/11/cbb62262cd443c45.png"><br>2，输入命令<code>node -v</code>查看Nodejs版本，输入命令<code>git --version</code>查看git版本<br><img src="https://i.bmp.ovh/imgs/2019/11/840778a7760d71dd.png"><br>3，输入命令<code>npm install hexo-cli -g</code>安装Hexo<br><img src="https://i.bmp.ovh/imgs/2019/11/3ce720dad7a728ed.png"><br>4，你可以输入命令<code>hexo -v</code>来查看当前hexo 版本<br><img src="https://i.bmp.ovh/imgs/2019/11/65a068666ab9fb38.png"><br>5，接下来我们初始化hexo，输入命令<code>hexo init myblog</code>（myblog可以自己设置)<br><img src="https://i.bmp.ovh/imgs/2019/11/b50b37e64e30a800.png"><br>6，我们进入刚刚创建的myblog文件夹，命令<code>cd myblog/</code>然后输入<code>npm install</code>我们的文件夹会出现以下的内容<br><img src="https://i.bmp.ovh/imgs/2019/11/1668a160318c27a7.png"><br>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br> _config.yml: 博客的配置文件<br>7，然后输入命令<code>hexo g</code>生成，运行完后输入命令<code>hexo s</code>启动，之后会给你一个地址例如:<a href="https://localhost:4000/">https://localhost:4000</a><br><img src="https://s2.ax1x.com/2019/11/23/MqXXng.md.png" alt="MqXXng.md.png"><br>8,我们通过浏览器打开会出现以下页面<br><img src="https://ftp.bmp.ovh/imgs/2019/11/c6eefe392b45635f.png">  </p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>到此我们的搭建就结束了，注意:这个博客是搭建在本地的，通过<code>hexo s</code>命令来启动的，如果它关闭了，博客也会关闭。大家可以通过部署到github来让其他人访问。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Hexo" scheme="http://125542159.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用七牛云对象存储储存照片</title>
    <link href="http://125542159.github.io/2020/10/05/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/"/>
    <id>http://125542159.github.io/2020/10/05/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-05T11:41:07.000Z</published>
    <updated>2020-11-30T05:34:56.275Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="利用七牛云对象存储储存照片"><a href="#利用七牛云对象存储储存照片" class="headerlink" title="利用七牛云对象存储储存照片"></a>利用七牛云对象存储储存照片</h1><p>写毕设的时候需要用到图片，于是我就使用使用了七牛云，你要问我为什么，那我只能告诉你，对于嫖客来说，免费才是最好。废话不多说，我们开始吧。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>注册七牛云</li><li>完成实名认证()</li><li>创建bucket</li><li>取得密钥等信息</li></ul><p>我们直接进行Bucket创建</p><p><img src="https://cdn.jsdelivr.net/gh/1255542159/Pic/typora/20201005151828.png"></p><p>创建完成后我们就可以得到测试域名(qiniuDomin)和buckName</p><p><img src="https://cdn.jsdelivr.net/gh/1255542159/Pic/typora/20201005152134.png"></p><p>对于accessKey和secretKey，在密钥管理里面可以找到</p><p><img src="https://cdn.jsdelivr.net/gh/1255542159/Pic/typora/20201005152346.png"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>到入七牛云依赖</li><li>配置七牛云</li><li>编写图片上传Controller Service等</li><li>编写图片上传逻辑并调用七牛云图片上传</li><li>返回信息</li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="导入pom依赖"><a href="#导入pom依赖" class="headerlink" title="导入pom依赖"></a>导入pom依赖</h3><p>导入七牛云依赖fastjson,fastjson用来解析图片上传成功后返回的对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--七牛云--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qiniu-java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置七牛云"><a href="#配置七牛云" class="headerlink" title="配置七牛云"></a>配置七牛云</h3><p>在application.yml下进行如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">qiniu:</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">对应AK</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">对应SK</span></span><br><span class="line">  <span class="attr">buckName:</span> <span class="string">空间名</span></span><br><span class="line">  <span class="attr">qiniuDomin:</span> <span class="string">测试域名</span></span><br></pre></td></tr></table></figure><h3 id="编写图片上传逻辑"><a href="#编写图片上传逻辑" class="headerlink" title="编写图片上传逻辑"></a>编写图片上传逻辑</h3><p>Controller代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/uploadImage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseVo <span class="title">uploadImage</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.uploadImage(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Service代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>, <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RefreshTokenMapper refreshTokenMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SnowflakeIdWorker idWorker;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从application.yml取值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;qiniu.accessKey&#125;&quot;)</span></span><br><span class="line">    String ACCESS_KEY;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;qiniu.secretKey&#125;&quot;)</span></span><br><span class="line">    String SECRET_KEY;</span><br><span class="line">    <span class="comment">// 要上传的空间</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;qiniu.buckName&#125;&quot;)</span></span><br><span class="line">    String bucketname;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密钥配置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Auth <span class="title">getAuth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Auth.create(ACCESS_KEY, SECRET_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造一个带指定Zone对象的配置类,不同的七云牛存储区域调用不同的zone</span></span><br><span class="line">    Configuration cfg = <span class="keyword">new</span> Configuration(Zone.zone2());</span><br><span class="line">    <span class="comment">// ...其他参数参考类注释</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> UploadManager <span class="title">getUploadManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UploadManager(cfg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试域名，只有30天有效期</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;qiniu.qiniuDomin&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String QINIU_IMAGE_DOMAIN;</span><br><span class="line">        <span class="comment">// 简单上传，使用默认策略，只需要设置上传的空间名就可以了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUpToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getAuth().uploadToken(bucketname);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseVo <span class="title">uploadImage</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.校验file是否存在</span></span><br><span class="line"><span class="comment">         * 2.校验图片格式 jpg,png,gif,psd</span></span><br><span class="line"><span class="comment">         * 3.文件上传</span></span><br><span class="line"><span class="comment">         * a:图片格式不变，命名</span></span><br><span class="line"><span class="comment">         * b:七牛云认证参数信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">            <span class="keyword">if</span> (file == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> ResponseVo.FAILED(<span class="string">&quot;图片文件不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> size = file.getSize();</span><br><span class="line">            System.out.println(<span class="string">&quot;size ==&gt;&quot;</span>+size);</span><br><span class="line">            <span class="comment">//图片大小不能超过5MB</span></span><br><span class="line">            <span class="keyword">if</span> (size &gt;= <span class="number">2097152</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> ResponseVo.FAILED(<span class="string">&quot;图片过大&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//获取原始文件名</span></span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">            <span class="comment">//获取文件后缀</span></span><br><span class="line">        String type = FilenameUtils.getExtension(originalFilename);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseVo.FAILED(<span class="string">&quot;图片类型为空，请检查后重试！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">if</span>(<span class="string">&quot;JPG&quot;</span>.equals(type.toUpperCase()) || <span class="string">&quot;PNG&quot;</span>.equals(type.toUpperCase())</span><br><span class="line">                || <span class="string">&quot;GIF&quot;</span>.equals(type.toUpperCase()) || <span class="string">&quot;PSD&quot;</span>.equals(type.toUpperCase()))&#123;</span><br><span class="line">            <span class="comment">//图片格式正确</span></span><br><span class="line">            <span class="comment">//对图片重命名</span></span><br><span class="line">            String fileName = System.currentTimeMillis()+<span class="string">&quot;.&quot;</span>+type;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//将图片上传到七牛云服务器</span></span><br><span class="line">                Response response = getUploadManager().put(file.getBytes(), fileName, getUpToken());</span><br><span class="line">                <span class="comment">//判断状态</span></span><br><span class="line">                <span class="keyword">if</span>(response.isOK() &amp;&amp; response.isJson())&#123;</span><br><span class="line">                    <span class="comment">//表示上传成功</span></span><br><span class="line">                    <span class="comment">//获取七牛云图片地址</span></span><br><span class="line">                    Object key = JSONObject.parseObject(response.bodyString()).get(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">                    <span class="comment">//将图片地址返回</span></span><br><span class="line">                    <span class="keyword">return</span> ResponseVo.SUCCESS(<span class="string">&quot;上传成功&quot;</span>).setData(QINIU_IMAGE_DOMAIN+<span class="string">&quot;/&quot;</span>+key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseVo.FAILED(<span class="string">&quot;请上传【jpg,png,gif,psd】类型的图片！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="七牛云" scheme="http://125542159.github.io/categories/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
    
    <category term="七牛云" scheme="http://125542159.github.io/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>TCP实现文件上传</title>
    <link href="http://125542159.github.io/2020/09/02/TCP%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://125542159.github.io/2020/09/02/TCP%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-09-02T11:41:07.000Z</published>
    <updated>2020-11-30T05:35:48.168Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="TCP实现文件上传"><a href="#TCP实现文件上传" class="headerlink" title="TCP实现文件上传"></a>TCP实现文件上传</h1><h2 id="Tcp客户端"><a href="#Tcp客户端" class="headerlink" title="Tcp客户端"></a>Tcp客户端</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>得知服务端地址，端口，创建socket连接</li><li>创建输出流</li><li>创建文件输入流来读取文件</li><li>通过输出流将文件写出</li><li>通知服务端已经传输完毕</li><li>接收服务端传回的接收完毕信息</li><li>关闭流</li></ul><h3 id="客户端代码："><a href="#客户端代码：" class="headerlink" title="客户端代码："></a>客户端代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.code.netWork.tcpfile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tcp客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpUploadFileClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.得知服务端地址端口</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">2020</span>);</span><br><span class="line">        <span class="comment">//2.创建输出流</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.读取文件</span></span><br><span class="line">        FileInputStream fStream =</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;src\\main\\java\\com\\example\\code\\netWork\\tcpfile\\123456.jpeg&quot;</span>));</span><br><span class="line">        <span class="comment">//4.将文件写出</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.通知服务端我已经传完了</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        <span class="comment">//6.确定服务端已经接收完毕，断开连接</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        ByteArrayOutputStream byteOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffer2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="keyword">int</span> len2;</span><br><span class="line">        <span class="keyword">while</span> ((len2 = inputStream.read(buffer2)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            byteOutputStream.write(buffer2, <span class="number">0</span>, len2);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(byteOutputStream.toString());</span><br><span class="line">        <span class="comment">//7.关闭流</span></span><br><span class="line">        byteOutputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        fStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tcp客户端-1"><a href="#Tcp客户端-1" class="headerlink" title="Tcp客户端"></a>Tcp客户端</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ul><li>设置服务端端口号 </li><li>监听客户端连接</li><li>输入流</li><li>通过文件输出流保存文件</li><li>接收完毕通知客户端</li><li>关闭流</li></ul><h3 id="客户端代码：-1"><a href="#客户端代码：-1" class="headerlink" title="客户端代码："></a>客户端代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.code.netWork.tcpfile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tcp服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpUploadFileServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.设置服务端端口</span></span><br><span class="line">        ServerSocket socket = <span class="keyword">new</span> ServerSocket(<span class="number">2020</span>);</span><br><span class="line">        <span class="comment">//2.对客户机进行监听</span></span><br><span class="line">        Socket socket2 = socket.accept();</span><br><span class="line">        <span class="comment">//3.获取输入流</span></span><br><span class="line">        InputStream in = socket2.getInputStream();</span><br><span class="line">        <span class="comment">//4.文件输出</span></span><br><span class="line">        FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;src\\main\\java\\com\\example\\code\\netWork\\tcpfile\\recevier.jpeg&quot;</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.若接收完毕，通知客户端接收完毕</span></span><br><span class="line">        OutputStream outputStream = socket2.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;我接收完毕！&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//6.关闭流</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">        socket2.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Tcp" scheme="http://125542159.github.io/categories/Tcp/"/>
    
    
    <category term="Centos" scheme="http://125542159.github.io/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>TCP 实现聊天</title>
    <link href="http://125542159.github.io/2020/08/31/TCP%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9/"/>
    <id>http://125542159.github.io/2020/08/31/TCP%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9/</id>
    <published>2020-08-31T11:41:07.000Z</published>
    <updated>2020-11-30T05:36:00.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="TCP-实现聊天"><a href="#TCP-实现聊天" class="headerlink" title="TCP 实现聊天"></a>TCP 实现聊天</h1><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ul><li>1.客户端得知道服务端地址</li><li>2.得知道服务端的端口号</li><li>3.通过Socket与服务端建立连接</li><li>4.通过输出流的方法发送信息</li></ul><p>客户端代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.code.netWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> joy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/8/31 19:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClientDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1.创建ip</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//得知服务端地址</span></span><br><span class="line">            InetAddress inetAddress = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="comment">//服务端端口号</span></span><br><span class="line">            <span class="keyword">int</span> port = <span class="number">9999</span>;</span><br><span class="line">            <span class="comment">//通过socket建立连接</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(inetAddress,port);</span><br><span class="line">            out = socket.getOutputStream();</span><br><span class="line">            out.write(<span class="string">&quot;我是消息&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            out.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ul><li>服务端得设置端口号</li><li>通过socket与客户端建立连接</li><li>通过输入流得到客户端发送的输入流</li><li>通过将输入流写入字节数组输出流来打印信息</li></ul><p>服务端代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.code.netWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> joy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/8/31 19:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">socketServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket accept =  <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">           <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">               accept = serverSocket.accept();</span><br><span class="line">               inputStream = accept.getInputStream();</span><br><span class="line">               out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">               <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">               <span class="keyword">int</span> len;</span><br><span class="line">               <span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                   out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">               &#125;</span><br><span class="line">               System.out.println(out.toString());</span><br><span class="line">           &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            out.close();</span><br><span class="line">            inputStream.close();</span><br><span class="line">            accept.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Tcp" scheme="http://125542159.github.io/categories/Tcp/"/>
    
    
    <category term="Centos" scheme="http://125542159.github.io/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Mysql报错Error 1130</title>
    <link href="http://125542159.github.io/2020/05/21/Mysql%E6%8A%A5%E9%94%99Error%201130/"/>
    <id>http://125542159.github.io/2020/05/21/Mysql%E6%8A%A5%E9%94%99Error%201130/</id>
    <published>2020-05-21T12:22:07.000Z</published>
    <updated>2020-06-26T14:35:05.563Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天在用navicat连接非本地的Mysql服务器的数据库，居然无法连接很奇怪，报1130错误，</p><p>ERROR 1130: Host 192.168.3.100 is not allowed to connect to this MySQL server</p><p>猜想是无法给远程连接的用户权限问题。</p><h2 id="常用的解决方法"><a href="#常用的解决方法" class="headerlink" title="常用的解决方法"></a>常用的解决方法</h2><p>在本机登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称’%’。</p><ul><li>以权限用户root登录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><ul><li>选择mysql库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;use mysql;</span><br></pre></td></tr></table></figure><ul><li>查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;select &#39;host&#39; from user where user&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure><ul><li>修改host值（以通配符%的内容增加主机/IP地址），当然也可以直接增加IP地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;update user set host &#x3D; &#39;%&#39; where user &#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure><ul><li>刷新MySQL的系统权限相关表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure><ul><li>再重新查看user表时，有修改。。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;select &#39;host&#39;  from user where user&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure><p>记得Mysql服务需要重新启动（确保修改有效），否则可能</p><h2 id="最快的解决方法"><a href="#最快的解决方法" class="headerlink" title="最快的解决方法"></a>最快的解决方法</h2><ul><li>授权root用户对所有数据库在任何ip都可以进行操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to root@&#39;%&#39; identified by &#39;123456&#39; with grant option;</span><br></pre></td></tr></table></figure><ul><li>刷新数据库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Mysql" scheme="http://125542159.github.io/categories/Mysql/"/>
    
    
    <category term="Mysql" scheme="http://125542159.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装Mysql5.7</title>
    <link href="http://125542159.github.io/2020/05/20/Centos7%E5%AE%89%E8%A3%85Mysql5-7/"/>
    <id>http://125542159.github.io/2020/05/20/Centos7%E5%AE%89%E8%A3%85Mysql5-7/</id>
    <published>2020-05-20T11:41:07.000Z</published>
    <updated>2020-06-03T13:49:58.605Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="第一步-Mysql的安装下载并安装-MySQL-官方的-Yum-Repository"><a href="#第一步-Mysql的安装下载并安装-MySQL-官方的-Yum-Repository" class="headerlink" title="第一步 Mysql的安装下载并安装 MySQL 官方的 Yum Repository"></a>第一步 Mysql的安装下载并安装 MySQL 官方的 Yum Repository</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -i -c http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>使用上面的命令就直接下载了安装用的 Yum Repository，大概 25KB 的样子，然后就可以直接 yum 安装了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>之后就开始安装MySql服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p>这步可能会花些时间，安装完成后就会覆盖掉之前的 mariadb。</p><p>至此 MySQL 就安装完成了，然后是对 MySQL 的一些设置。</p><h2 id="2-MySQL-数据库设置"><a href="#2-MySQL-数据库设置" class="headerlink" title="2 MySQL 数据库设置"></a>2 MySQL 数据库设置</h2><p>首先启动 MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start  mysqld.service</span><br></pre></td></tr></table></figure><p>查看 MySQL 运行状态，运行状态如图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure><p>此时 MySQL 已经开始正常运行，不过要想进入 MySQL 还得先找出此时 root 用户的密码，通过如下命令可以在日志文件中找出密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;password&quot; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br></pre></td></tr></table></figure><p>如下命令进入数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p> 输入初始密码，此时不能做任何事情，因为 MySQL 默认必须修改密码之后才能操作数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new password&#39;;</span><br></pre></td></tr></table></figure><p> 这里有个问题，新密码设置的时候如果设置的过于简单会报错：</p><p> 原因是因为 MySQL 有密码设置的规范，具体是与 validate_password_policy 的值有关：</p><p> MySQL 完整的初始密码规则可以通过如下命令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| Variable_name                        | Value |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| validate_password_check_user_name    | OFF   |</span><br><span class="line">| validate_password_dictionary_file    |       |</span><br><span class="line">| validate_password_length             | 4     |</span><br><span class="line">| validate_password_mixed_case_count   | 1     |</span><br><span class="line">| validate_password_number_count       | 1     |</span><br><span class="line">| validate_password_policy             | LOW   |</span><br><span class="line">| validate_password_special_char_count | 1     |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">7 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p> 密码的长度是由 validate_password_length 决定的，而 validate_password_length 的计算公式是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">validate_password_length &#x3D; validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)</span><br></pre></td></tr></table></figure><p>设置密码安全级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy&#x3D;0;</span><br></pre></td></tr></table></figure><p>设置密码最小长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_length&#x3D;1;</span><br></pre></td></tr></table></figure><p>但此时还有一个问题，就是因为安装了 Yum Repository，以后每次 yum 操作都会自动更新，需要把这个卸载掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove mysql57-community-release-el7-10.noarch;</span><br></pre></td></tr></table></figure><p>此时才算真的完成了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Centos" scheme="http://125542159.github.io/categories/Centos/"/>
    
    
    <category term="Centos" scheme="http://125542159.github.io/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Udp发送消息</title>
    <link href="http://125542159.github.io/2020/05/20/Udp%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/"/>
    <id>http://125542159.github.io/2020/05/20/Udp%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</id>
    <published>2020-05-20T11:41:07.000Z</published>
    <updated>2020-11-30T05:29:14.541Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Udp发送消息"><a href="#Udp发送消息" class="headerlink" title="Udp发送消息"></a>Udp发送消息</h1><h2 id="发送方步骤分析"><a href="#发送方步骤分析" class="headerlink" title="发送方步骤分析"></a>发送方步骤分析</h2><ul><li>不需要连接服务器</li><li>需要知道接收方地址，接收方端口</li><li>需要消息体</li><li>发送数据包</li><li>关闭流</li></ul><h3 id="发送方代码："><a href="#发送方代码：" class="headerlink" title="发送方代码："></a>发送方代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.code.netWork.udpsendmsg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> joy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/3 19:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//Udp发送信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpSendMsgDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//udp不需要连接服务器</span></span><br><span class="line">        <span class="comment">//建立一个socket</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        <span class="comment">//初始化地址和端口</span></span><br><span class="line">        InetAddress localhost = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">9000</span>;</span><br><span class="line">        String msg = <span class="string">&quot;你好！&quot;</span>;</span><br><span class="line">        <span class="comment">//建立一个数据包</span></span><br><span class="line">        DatagramPacket datagramPacket =</span><br><span class="line">                <span class="keyword">new</span> DatagramPacket(msg.getBytes(),<span class="number">0</span>,msg.getBytes().length,localhost,port);</span><br><span class="line">        <span class="comment">//发送数据包</span></span><br><span class="line">        socket.send(datagramPacket);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="接收方步骤分析"><a href="#接收方步骤分析" class="headerlink" title="接收方步骤分析"></a>接收方步骤分析</h2><ul><li>开放端口</li><li>建立一个数据包</li><li>接收数据包</li><li>关闭流</li></ul><h3 id="接收方代码："><a href="#接收方代码：" class="headerlink" title="接收方代码："></a>接收方代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.code.netWork.udpsendmsg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> joy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/3 19:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//Udp发送信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpSendMsgDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//开放端口号</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9000</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//建立一个数据包</span></span><br><span class="line">        DatagramPacket datagramPacket =</span><br><span class="line">                <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        socket.receive(datagramPacket);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(datagramPacket.getData(), <span class="number">0</span>, datagramPacket.getLength()));</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Udp" scheme="http://125542159.github.io/categories/Udp/"/>
    
    
    <category term="Udp" scheme="http://125542159.github.io/tags/Udp/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://125542159.github.io/2020/05/20/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://125542159.github.io/2020/05/20/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2020-05-20T11:41:07.000Z</published>
    <updated>2020-11-30T05:29:48.226Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><ul><li>真实对象与代理对象都需要实现接口</li><li>代理对象要代理真实对象</li><li>代理对象可以做很多真实对象不能做的事</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.code.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> joy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/5 9:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态代理</span></span><br><span class="line"><span class="comment"> * 真实对象和代理对象都需要实现接口</span></span><br><span class="line"><span class="comment"> * 代理对象要代理真实对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        You you = <span class="keyword">new</span> You();</span><br><span class="line">        intermediary intermediary = <span class="keyword">new</span> intermediary(you);</span><br><span class="line">        intermediary.buyHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">buyHouse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buyHouse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">buyHouse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;今天买房了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中介代理 帮助我买房</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">intermediary</span> <span class="keyword">implements</span> <span class="title">buyHouse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> buyHouse target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">intermediary</span><span class="params">(buyHouse target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="keyword">this</span>.target.buyHouse();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;介绍房源&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收取中介费用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="JDK代理模式"><a href="#JDK代理模式" class="headerlink" title="JDK代理模式"></a>JDK代理模式</h3><p>只能代理实现接口的类</p><ul><li><p>定义一个接口，创建一个真实对象</p></li><li><p>定义一个代理对象依赖InvocationHandler，并实现Invoke()方法</p></li><li><p>传入真实对象</p></li><li><p>获取代理对象</p><p>接口代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.work;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SendMessage</span> </span>&#123;</span><br><span class="line"><span class="function">String <span class="title">send</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接口的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageImpl</span> <span class="keyword">implements</span> <span class="title">SendMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;sned message&quot;</span>+message);</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK动态代理类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DebugInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DebugInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;before&quot;</span>);<span class="comment">//调用方法之前</span></span><br><span class="line"> Object resultObject = method.invoke(target, args);</span><br><span class="line"> System.out.println(<span class="string">&quot;after&quot;</span>);<span class="comment">//调用方法之后</span></span><br><span class="line"><span class="keyword">return</span> resultObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Proxy.newPropackage com.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">DebugInvocationHandler debug = <span class="keyword">new</span> DebugInvocationHandler(<span class="keyword">new</span> SendMessageImpl());</span><br><span class="line">SendMessage sendMessage = (SendMessage)debug.getProxy();</span><br><span class="line">sendMessage.send(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xyInstance(</span><br><span class="line">target.getClass().getClassLoader(),<span class="comment">//目标类的类加载</span></span><br><span class="line">target.getClass().getInterfaces(),<span class="comment">//代理需要实现的接口</span></span><br><span class="line"><span class="keyword">new</span> DebugInvocationHandler(target));<span class="comment">//代理对象定义的自定义InvocationHandler</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">DebugInvocationHandler debug = <span class="keyword">new</span> DebugInvocationHandler(<span class="keyword">new</span> SendMessageImpl());</span><br><span class="line">SendMessage sendMessage = (SendMessage)debug.getProxy();</span><br><span class="line">sendMessage.send(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="CGLIB代理模式"><a href="#CGLIB代理模式" class="headerlink" title="CGLIB代理模式"></a>CGLIB代理模式</h3><p>可以代理未实现接口的类</p><ul><li>定义一个类</li><li>建立拦截器依赖MethodInterceptor，实现Interceptor方法</li><li>获取代理类<ul><li>创建动态代理增加类</li><li>设置类加载器</li><li>设置被代理类</li><li>设置拦截器</li><li>创建代理类</li></ul></li></ul><p>发送信息类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.code.model;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> joy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/11 15:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拦截器代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.code.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> joy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/11 15:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>+method.getName());</span><br><span class="line">        Object object= methodProxy.invokeSuper(o, objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>+method.getName());</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取代理类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.code.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> joy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/11 15:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cglib</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxy</span><span class="params">(Class&lt;?&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个动态代理增强类</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置类加载器</span></span><br><span class="line">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class="line">        <span class="comment">//设置被代理类</span></span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        <span class="comment">//设置拦截器</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MyInterceptor());</span><br><span class="line">        <span class="comment">//创建代理类</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.code.model;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> joy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/11 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCglib</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SendMessage proxy = (SendMessage) Cglib.getProxy(SendMessage.class);</span><br><span class="line">        proxy.sendMessage(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK代理和CGLIB代理对比"><a href="#JDK代理和CGLIB代理对比" class="headerlink" title="JDK代理和CGLIB代理对比"></a>JDK代理和CGLIB代理对比</h2><ul><li>JDK动态代理只能代理实现了接口的类，而CGLIB可以代理未实现任何接口的类，CGLIB是通过生成一个被代理类的子类来拦截被代理类的方法调用。</li><li>就效率而言，JDK动态代理更加优秀</li></ul><h2 id="静态代理和动态代理的对比"><a href="#静态代理和动态代理的对比" class="headerlink" title="静态代理和动态代理的对比"></a>静态代理和动态代理的对比</h2><ul><li>灵活性：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个实现类都创建代理类。静态代理类中，接口一旦增加方法，目标对象和代理都需要修改。</li><li>JVM层面：静态代理在编译时将接口，实现类，代理类等生成.class文件，而动态代理则是在运行时生成动态生成字节码，并加载到JVM。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Java" scheme="http://125542159.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://125542159.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring一Hello World实例</title>
    <link href="http://125542159.github.io/2020/04/01/Spring%E4%B8%80HelloWorld/"/>
    <id>http://125542159.github.io/2020/04/01/Spring%E4%B8%80HelloWorld/</id>
    <published>2020-04-01T11:41:07.000Z</published>
    <updated>2020-04-01T14:39:20.684Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p>学习任何一门计算机语言，我们都避免不了HelloWorld.所以让我们编写一个简单的Spring程序吧!<br>运行环境:<br>1.IDEA2019 3.3<br>2.Jdk1.8<br>3.Spring5.2.3  </p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构:"></a>项目结构:</h2><p><img src="http://ww1.sinaimg.cn/mw690/0071fQo9ly1gdel6xthiaj30dy0ny3yx.jpg" alt="2.png">  </p><h2 id="第一步：创建Java项目"><a href="#第一步：创建Java项目" class="headerlink" title="第一步：创建Java项目"></a>第一步：创建Java项目</h2><p>使用IDEA创建一个项目。按照选项File -&gt; New -&gt; Projects -&gt; Spring,然后一路Next，第一次创建有点慢，IDEA需要去下载依赖包。  </p><p><img src="http://ww1.sinaimg.cn/large/0071fQo9ly1gdejjcrkv6j31dc0p80us.jpg" alt="8E35C0D9-A009-4c03-B04B-5323E6F100B8.png">  </p><h2 id="第二步：添加依赖"><a href="#第二步：添加依赖" class="headerlink" title="第二步：添加依赖"></a>第二步：添加依赖</h2><p>若下载失败，我们就需要手动导包，按照选项File -&gt; Project Structure -&gt; Libraries -&gt; + -&gt; Java。我们选择我们需要导入的依赖即可。  </p><p><img src="http://ww1.sinaimg.cn/large/0071fQo9ly1gdejywr9taj31em0hfaas.jpg" alt="1.png"></p><h2 id="第三步：创建MainTest-java和bean-xml"><a href="#第三步：创建MainTest-java和bean-xml" class="headerlink" title="第三步：创建MainTest.java和bean.xml"></a>第三步：创建MainTest.java和bean.xml</h2><p>我们在src目录下创建一个新的包com.hexo.blog，然后在其下面创建MainTest.java和Person.java文件,在src目录下创建beans.xml。<br>以下是MainTest.java代码：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.hexo.blog;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        Person hello &#x3D; (Person) context.getBean(&quot;hello&quot;);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#96;&#96;&#96;</span><br><span class="line">  </span><br><span class="line">以下是Person.java代码：  </span><br></pre></td></tr></table></figure><p>package com.hexo.blog;</p><p>public class Person {<br>    private String message;</p><pre><code>public String getMessage() &#123;    return message;&#125;public void setMessage(String message) &#123;    this.message = message;&#125;@Overridepublic String toString() &#123;    return &quot;Person&#123;&quot; +            &quot;message=&#39;&quot; + message + &#39;\&#39;&#39; +            &#39;&#125;&#39;;&#125;</code></pre><p>}```</p><p>以下是beans.xml代码：  </p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;bean id=&quot;hello&quot; class=&quot;com.hexo.blog.Person&quot;&gt;        &lt;property name=&quot;message&quot; value=&quot;你好,世界&quot;/&gt;    &lt;/bean&gt;&lt;/beans&gt;```## 第四步：运行程序  ## ![2.png](http://ww1.sinaimg.cn/large/0071fQo9ly1gdel56p9xcj314b08jjrr.jpg)  </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Spring" scheme="http://125542159.github.io/categories/Spring/"/>
    
    
    <category term="Spring" scheme="http://125542159.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java使用jdbc连接数据库</title>
    <link href="http://125542159.github.io/2020/03/22/Git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://125542159.github.io/2020/03/22/Git%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-22T14:13:21.000Z</published>
    <updated>2020-06-26T14:51:37.104Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><pre><code>public class MysqlDemo &#123;/*java操作jdbc */public static void main(String[] args) &#123;    try &#123;        //1.注册驱动(引入驱动包)        //链接:[https://pan.baidu.com/s/1AIN0ESKkxGo8qV46wVegLw](https://pan.baidu.com/s/1AIN0ESKkxGo8qV46wVegLw)提取码：hd3i         Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2.获取连接        Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/数据库名&quot;,&quot;数据库用户名&quot;,&quot;数据库密码&quot;);        //3.获取statement对象        Statement statement = connection.createStatement();        //4.执行sql语句//得到结果集        String sql = &quot;select id,name,age,sex from student_1&quot;;        ResultSet resultSet = statement.executeQuery(sql);        //5.遍历结果集，取出数据        while (resultSet.next())&#123;              //根据列标签来获取值            int id = resultSet.getInt(&quot;id&quot;);            String name = resultSet.getString(&quot;name&quot;);            int age = resultSet.getInt(&quot;age&quot;);            String sex = resultSet.getString(&quot;sex&quot;);            System.out.println(id+name+age+sex);        &#125;        //6.先开的后关        resultSet.close();        statement.close();        connection.close();    &#125; catch (ClassNotFoundException | SQLException e) &#123;        e.printStackTrace();    &#125;&#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Git" scheme="http://125542159.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Windows安装Mysql解压版</title>
    <link href="http://125542159.github.io/2019/12/09/%E5%AE%89%E8%A3%85Mysql%E8%A7%A3%E5%8E%8B%E7%89%88/"/>
    <id>http://125542159.github.io/2019/12/09/%E5%AE%89%E8%A3%85Mysql%E8%A7%A3%E5%8E%8B%E7%89%88/</id>
    <published>2019-12-09T11:14:21.000Z</published>
    <updated>2020-03-27T15:56:22.909Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Windows安装Mysql解压版"><a href="#Windows安装Mysql解压版" class="headerlink" title="Windows安装Mysql解压版"></a>Windows安装Mysql解压版</h1><h2 id="mysql下载地址-https-pan-baidu-com-s-17De5BaiWcWdMgleO2FVpRQ"><a href="#mysql下载地址-https-pan-baidu-com-s-17De5BaiWcWdMgleO2FVpRQ" class="headerlink" title="mysql下载地址:https://pan.baidu.com/s/17De5BaiWcWdMgleO2FVpRQ"></a>mysql下载地址:<a href="https://pan.baidu.com/s/17De5BaiWcWdMgleO2FVpRQ">https://pan.baidu.com/s/17De5BaiWcWdMgleO2FVpRQ</a></h2><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="1-将压缩包mysql-5-7-17-winx64-zip解压到目标位置。如：D盘。"><a href="#1-将压缩包mysql-5-7-17-winx64-zip解压到目标位置。如：D盘。" class="headerlink" title="1,将压缩包mysql-5.7.17-winx64.zip解压到目标位置。如：D盘。"></a>1,将压缩包mysql-5.7.17-winx64.zip解压到目标位置。如：D盘。</h3><h3 id="2-在解压文件夹中新建一个名为data的文件夹。"><a href="#2-在解压文件夹中新建一个名为data的文件夹。" class="headerlink" title="2,在解压文件夹中新建一个名为data的文件夹。"></a>2,在解压文件夹中新建一个名为data的文件夹。</h3><p><img src="http://ww1.sinaimg.cn/large/0071fQo9gy1g9qrmifsluj30q50bzwfd.jpg" alt="avatar"></p><h3 id="3-打开配置文件my-default-ini看到里面的basedir-MySQL的安装路径-和datadir（数据库文件所在路径）是没有打开的，前面有-，路径也是以“……”表示。去掉basedir和datadir前面的-，basedir添加的是MySQL的解压路径；datadir添加的是MySQL的data文件夹路径。"><a href="#3-打开配置文件my-default-ini看到里面的basedir-MySQL的安装路径-和datadir（数据库文件所在路径）是没有打开的，前面有-，路径也是以“……”表示。去掉basedir和datadir前面的-，basedir添加的是MySQL的解压路径；datadir添加的是MySQL的data文件夹路径。" class="headerlink" title="3,打开配置文件my-default.ini看到里面的basedir(MySQL的安装路径)和datadir（数据库文件所在路径）是没有打开的，前面有#，路径也是以“……”表示。去掉basedir和datadir前面的#，basedir添加的是MySQL的解压路径；datadir添加的是MySQL的data文件夹路径。"></a>3,打开配置文件my-default.ini看到里面的basedir(MySQL的安装路径)和datadir（数据库文件所在路径）是没有打开的，前面有#，路径也是以“……”表示。去掉basedir和datadir前面的#，basedir添加的是MySQL的解压路径；datadir添加的是MySQL的data文件夹路径。</h3><p><img src="http://ww1.sinaimg.cn/large/0071fQo9gy1g9qrqjcfcjj30fd0ahtc4.jpg" alt="avatar"><br><img src="http://ww1.sinaimg.cn/large/0071fQo9gy1g9qsqoqqmoj30fe0dh775.jpg" alt="avatar">  </p><h3 id="4-接下来就是配置环境变量，首先把bin的地址复制：打开MySQL解压文件夹里面的bin文件夹，将鼠标点击到地址栏选中，复制地址（这样做的目的是防止打字出错，而且方便）。"><a href="#4-接下来就是配置环境变量，首先把bin的地址复制：打开MySQL解压文件夹里面的bin文件夹，将鼠标点击到地址栏选中，复制地址（这样做的目的是防止打字出错，而且方便）。" class="headerlink" title="4,接下来就是配置环境变量，首先把bin的地址复制：打开MySQL解压文件夹里面的bin文件夹，将鼠标点击到地址栏选中，复制地址（这样做的目的是防止打字出错，而且方便）。"></a>4,接下来就是配置环境变量，首先把bin的地址复制：打开MySQL解压文件夹里面的bin文件夹，将鼠标点击到地址栏选中，复制地址（这样做的目的是防止打字出错，而且方便）。</h3><p><img src="http://ww1.sinaimg.cn/large/0071fQo9gy1g9qsrur15hj30fe08gwhp.jpg" alt="avatar">  </p><h3 id="5-把刚刚复制的bin路径添加的Path变量值，具体方法是：打开电脑桌面-计算机—-gt-右击“属性”—-gt-高级系统设置—-gt-高级—-gt-环境变量（N）—-gt-修改Path；就是将复制的地址栏粘贴到最后。（这里注意的是不同的路径之间用英文的“；”分开）确定，退出。"><a href="#5-把刚刚复制的bin路径添加的Path变量值，具体方法是：打开电脑桌面-计算机—-gt-右击“属性”—-gt-高级系统设置—-gt-高级—-gt-环境变量（N）—-gt-修改Path；就是将复制的地址栏粘贴到最后。（这里注意的是不同的路径之间用英文的“；”分开）确定，退出。" class="headerlink" title="5,把刚刚复制的bin路径添加的Path变量值，具体方法是：打开电脑桌面:计算机—&gt;右击“属性”—&gt;高级系统设置—&gt;高级—&gt;环境变量（N）—&gt;修改Path；就是将复制的地址栏粘贴到最后。（这里注意的是不同的路径之间用英文的“；”分开）确定，退出。"></a>5,把刚刚复制的bin路径添加的Path变量值，具体方法是：打开电脑桌面:计算机—&gt;右击“属性”—&gt;高级系统设置—&gt;高级—&gt;环境变量（N）—&gt;修改Path；就是将复制的地址栏粘贴到最后。（这里注意的是不同的路径之间用英文的“；”分开）确定，退出。</h3><p><img src="http://ww1.sinaimg.cn/large/0071fQo9gy1g9qst1k82pj309x041aa4.jpg" alt="avatar">  </p><h3 id="6-以管理员身份运行cmd（一定要用管理员身份运行，不然权限不够），具体方法是：右击命令提示符窗口，选择“以管理员身份运行”。然后在命令提示符窗口中，进到MySQL解压目录下的bin文件-不管有没有配置过环境变量，也要进入bin文件夹，否则之后启动服务仍然会报错误-：具体方法是：这里以D盘下的路径为例："><a href="#6-以管理员身份运行cmd（一定要用管理员身份运行，不然权限不够），具体方法是：右击命令提示符窗口，选择“以管理员身份运行”。然后在命令提示符窗口中，进到MySQL解压目录下的bin文件-不管有没有配置过环境变量，也要进入bin文件夹，否则之后启动服务仍然会报错误-：具体方法是：这里以D盘下的路径为例：" class="headerlink" title="6,以管理员身份运行cmd（一定要用管理员身份运行，不然权限不够），具体方法是：右击命令提示符窗口，选择“以管理员身份运行”。然后在命令提示符窗口中，进到MySQL解压目录下的bin文件(不管有没有配置过环境变量，也要进入bin文件夹，否则之后启动服务仍然会报错误)：具体方法是：这里以D盘下的路径为例："></a>6,以管理员身份运行cmd（一定要用管理员身份运行，不然权限不够），具体方法是：右击命令提示符窗口，选择“以管理员身份运行”。然后在命令提示符窗口中，进到MySQL解压目录下的bin文件(不管有没有配置过环境变量，也要进入bin文件夹，否则之后启动服务仍然会报错误)：具体方法是：这里以D盘下的路径为例：</h3><p>输入：D:<br>      cd MySQL\bin<br><img src="http://ww1.sinaimg.cn/large/0071fQo9gy1g9qsu563wij30fe048mxv.jpg" alt="avatar">  </p><h3 id="7-mysqld-–initialize-insecure-–user-mysql（使用-initialize初始化，用-insecure生成空密码。默认帐号root-后面的-user-mysql不更改。）"><a href="#7-mysqld-–initialize-insecure-–user-mysql（使用-initialize初始化，用-insecure生成空密码。默认帐号root-后面的-user-mysql不更改。）" class="headerlink" title="7,mysqld –initialize-insecure –user=mysql（使用-initialize初始化，用-insecure生成空密码。默认帐号root,后面的-user=mysql不更改。）"></a>7,mysqld –initialize-insecure –user=mysql（使用-initialize初始化，用-insecure生成空密码。默认帐号root,后面的-user=mysql不更改。）</h3><h3 id="8-安装MySQL，具体方法是：在之前的D-MySQL-bin-gt-后输入：mysqld-–install"><a href="#8-安装MySQL，具体方法是：在之前的D-MySQL-bin-gt-后输入：mysqld-–install" class="headerlink" title="8,安装MySQL，具体方法是：在之前的D:\MySQL\bin&gt;后输入：mysqld –install"></a>8,安装MySQL，具体方法是：在之前的D:\MySQL\bin&gt;后输入：mysqld –install</h3><p>注：mysqld –remove命令用来删除MySQL<br><img src="http://ww1.sinaimg.cn/large/0071fQo9gy1g9qsv6ae9mj30fe05ot9m.jpg" alt="avatar"></p><h3 id="9-启动服务，继续在cmd中输入-net-start-mysql（如图）-服务启动成功！"><a href="#9-启动服务，继续在cmd中输入-net-start-mysql（如图）-服务启动成功！" class="headerlink" title="9,启动服务，继续在cmd中输入:net start mysql（如图）,服务启动成功！"></a>9,启动服务，继续在cmd中输入:net start mysql（如图）,服务启动成功！</h3><p><img src="http://ww1.sinaimg.cn/large/0071fQo9gy1g9qsw8ek4nj30fe05ogmi.jpg" alt="avatar"><br>###注：停止服务的命令是 net stop mysql 也可以用界面方式启动和停止mysql服务。具体方法：右击“计算机”→“管理”→“服务与应用程序”→“服务”，在服务窗口中找到“mysql”服务，右击它，启动或停止。<br><img src="http://ww1.sinaimg.cn/large/0071fQo9gy1g9qsxhsojoj30fe06z0uv.jpg" alt="avatar"><br>###注意：如果之前没有运行第7步命令：mysqld –initialize-insecure –user=mysql ，可能会造成服务不能启动。 (这时应该先用命令mysqld –remove卸载mysql，再运行该命令) 命令mysqld –initialize-insecure –user=mysql的作用：使用-initialize初始化，用-insecure生成空密码。默认帐号root,后面的-user=mysql不更改。<br><img src="http://ww1.sinaimg.cn/large/0071fQo9gy1g9qsygfsxtj30fe05kac0.jpg" alt="avatar">  </p><h3 id="10-服务启动成功之后，就可以登录了，如图，输入mysql-u-root-p（第一次登录没有密码，直接按回车过）-登录成功！"><a href="#10-服务启动成功之后，就可以登录了，如图，输入mysql-u-root-p（第一次登录没有密码，直接按回车过）-登录成功！" class="headerlink" title="10,服务启动成功之后，就可以登录了，如图，输入mysql -u root -p（第一次登录没有密码，直接按回车过）,登录成功！"></a>10,服务启动成功之后，就可以登录了，如图，输入mysql -u root -p（第一次登录没有密码，直接按回车过）,登录成功！</h3><p><img src="http://ww1.sinaimg.cn/large/0071fQo9gy1g9qszbbj67j30fe075t9z.jpg" alt="avatar"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Mysql" scheme="http://125542159.github.io/tags/Mysql/"/>
    
  </entry>
  
</feed>
